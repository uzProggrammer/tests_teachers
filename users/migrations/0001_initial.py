# Generated by Django 4.1.3 on 2023-03-07 12:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_teacher', models.BooleanField(default=False)),
                ('fan', models.CharField(choices=[('math', 'Matematika'), ('ona_tili', 'Ona Tili'), ('musiqa', 'Musiqa'), ('rus_tili', 'Rus tili'), ('english', 'Chet tili'), ('j_tar', 'Jismoniy tarbiya'), ('tarix', 'Tasrix'), ('geografiya', 'Geografiya'), ('tasvir', "Tasviriy san'at"), ('informatika', 'Informatika'), ('direktor', 'Direktor'), ('urin_bosar', "Direktor o'rin bosari"), ('psixolog', 'Psixolog'), ('maslahatchi', 'Maslahatchi'), ('chqbt', 'Chqbt'), ('kitob', 'Kutubxona'), ('biologiya', 'Biologiya'), ('kimyo', 'Kimyo'), ('huquq', 'Huquq'), ('fizika', 'Fizika'), ('texnologiya', 'Texnologiya'), ('iqtisod', 'Iqtisod')], max_length=30)),
                ('is_student', models.BooleanField(default=True)),
                ('sinf', models.CharField(choices=[('51', '5.1'), ('52', '5.2'), ('61', '6.1'), ('62', '6.2'), ('71', '7.1'), ('72', '7.2'), ('73', '7.3'), ('81', '8.1'), ('82', '8.2'), ('83', '8.3'), ('91', '9.1'), ('92', '9.2'), ('93', '9.3'), ('101', '10.1'), ('102', '10.2'), ('103', '10.3'), ('111', '11.1'), ('112', '11.2'), ('113', '11.3')], max_length=30)),
                ('theme', models.CharField(choices=[('default', 'dark'), ('light', 'light')], max_length=30)),
                ('friends', models.ManyToManyField(blank=True, null=True, related_name='friends', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
